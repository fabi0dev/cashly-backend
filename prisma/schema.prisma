generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  expenses     Expenses[]
  transactions Transactions[]
  accounts     Accounts[]

  @@map("users")
}

model Expenses {
  id                String          @id @default(cuid())
  amount            Float
  category          String?
  date              DateTime        @default(now())
  dueDate           DateTime?
  isPaid            Boolean         @default(false)
  description       String?
  userId            String
  isRecurring       Boolean         @default(false)
  recurrenceType    RecurrenceType?
  recurrenceEndDate DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user         Users                 @relation(fields: [userId], references: [id])
  installments ExpenseInstallments[]

  @@map("expenses")
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model ExpenseInstallments {
  id                String    @id @default(cuid())
  expenseId         String
  amount            Float
  dueDate           DateTime
  paymentDate       DateTime?
  installmentNumber Int
  totalInstallments Int
  isPaid            Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  expense      Expenses       @relation(fields: [expenseId], references: [id])
  transactions Transactions[]

  @@map("expense_installments")
}

model Transactions {
  id                   String          @id @default(cuid())
  amount               Float
  type                 TransactionType
  date                 DateTime        @default(now())
  description          String?
  userId               String
  accountId            String?
  category             String?
  paymentMethod        PaymentMethod
  expenseInstallmentId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user               Users                @relation(fields: [userId], references: [id])
  account            Accounts?            @relation(fields: [accountId], references: [id])
  expenseInstallment ExpenseInstallments? @relation(fields: [expenseInstallmentId], references: [id])

  @@map("transactions")
}

enum TransactionType {
  ENTRY
  EXIT
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PIX
}

model Accounts {
  id        String    @id @default(cuid())
  name      String
  type      String
  balance   Float     @default(0)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user         Users          @relation(fields: [userId], references: [id])
  transactions Transactions[]

  @@map("accounts")
}
